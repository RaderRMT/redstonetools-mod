import com.replaymod.gradle.preprocess.PreprocessTask

//file:noinspection GroovyAssignabilityCheck

buildscript {
	def (major, minor, patch) = project.name.split("-")[0].tokenize('.')
	project.ext.mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int

	dependencies {
		classpath 'fabric-loom:fabric-loom.gradle.plugin:0.11-SNAPSHOT'
	}
}

plugins {
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.+'
}

apply plugin: 'fabric-loom'
apply plugin: 'com.replaymod.preprocess'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

def mappingsVersions = [
		11802: "1.18.2+build.4",
		11900: "1.19+build.4",
		11901: "1.19.1+build.6",
		11902: "1.19.2+build.28",
]

def fabricApiVersions = [
		11802: "0.53.4+1.18.2",
		11900: "0.55.0+1.19",
		11901: "0.58.5+1.19.1",
		11902: "0.76.0+1.19.2",
]

def worldEditApiVersions = [
		11802: "1.18.2:7.2.10",
		11900: "1.19:7.2.11-beta-01",
		11901: "1.19.1:7.2.11",
		11902: "1.19.2:7.2.12",
]

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
        name = "WorldEdit Maven"
        url = "https://maven.enginehub.org/repo/"
    }
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
}

dependencies {
	// Doctor (dependency-injection)
	include implementation("rip.hippo:Doctor:1.0.1")
	include implementation("javax.inject:javax.inject:1")

	// Json
	include implementation("javax.json:javax.json-api:1.1.4")
	include "org.glassfish:javax.json:1.1.4"

	// AutoService
	annotationProcessor implementation("com.google.auto.service:auto-service:1.1.0")

	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:${project.name}")

	mappings "net.fabricmc:yarn:${mappingsVersions[mcVersion]}:v2"

	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabricApiVersions[mcVersion]}")

	// Worldedit API
	modImplementation("com.sk89q.worldedit:worldedit-fabric-mc${worldEditApiVersions[mcVersion]}")

	modRuntimeOnly('me.djtheredstoner:DevAuth-fabric:1.1.0')
}

processResources {
	inputs.property("version", project.name + "-" + project.version)
	inputs.property("mcVersion", project.name)
	inputs.property("worldEditVersion", worldEditApiVersions[mcVersion].split(":")[1])

	filesMatching("fabric.mod.json") {
		expand "version": project.name + "-" + project.version,
		"mcVersion": project.name,
		"worldEditVersion": worldEditApiVersions[mcVersion].split(":")[1]
	}
}

if (mcVersion >= 11900) {
	loom.accessWidenerPath = rootProject.file("src/main/resources/redstonetools.accesswidener")
}

loom {
	runs {
		client {
			property('devauth.enabled', 'true')

			ideConfigGenerated = true
		}
	}
}

if (project.name == '1.19.2') {
	tasks.register('generateJava', Copy) {
		from "${project.parent.projectDir}/src/template/java"
		into "${project.parent.buildDir}/generated/java"
	}

	sourceSets.main.java.srcDir "${project.parent.buildDir}/generated/java"
	compileJava.dependsOn(generateJava)
}

// hack to add natives library path to intellij run config
// `MinecraftProvider` is not yet available yet during the `loom` configuration block above
// so we set it right before the `ideaSyncTask` task
tasks.ideaSyncTask.doFirst {
	def nativesPath = extension.getFiles().getNativesDirectory(project).getAbsolutePath()

	loom.runConfigs.configureEach { config ->
		if (config.name == "client") {
			config.property("java.library.path", nativesPath)
		}
	}
}

java {
	withSourcesJar()
	withJavadocJar()

	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

preprocess {
	vars.put("MC", project.mcVersion)

	keywords.set([
			".java": PreprocessTask.DEFAULT_KEYWORDS,
			".json": PreprocessTask.DEFAULT_KEYWORDS,
	])
}

shadowJar {
	archiveClassifier.set("unmapped")

	configurations = [project.configurations.shadow]

	from("LICENSE")
}

remapJar {
	inputFile = shadowJar.archiveFile
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release.set(17)
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}